services:
  mlflow:
    image: ghcr.io/mlflow/mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5001
      - MLFLOW_BACKEND_STORE_URI=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - MLFLOW_ARTIFACT_STORE=s3://${S3_BUCKET_NAME}/
      # - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      # - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "5001:5001"
    depends_on:
      - postgres

    command: sh -c 'pip install boto3 psycopg2-binary && mlflow server --backend-store-uri postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB} --default-artifact-root s3://${S3_BUCKET_NAME} --host ${HOST} --port 5001'
    networks:
      - mlflow_network

  postgres:
    image: postgres:13
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - mlflow_network
      - frontend

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    networks:
      - mlflow_network

  magic:
    image: mageai/mageai:latest

    env_file:
      - .env
    build:
      context: ../
      dockerfile: ./orchestration/mage_docker/Dockerfile
    environment:
      USER_CODE_PATH: ${PROJECT_NAME}

    ports:
      - 6789:6789
    volumes:
      - .:/app/
    restart: on-failure:5
    command: sh -c 'mage start ${PROJECT_NAME}'
    networks:
      - mlflow_network

  grafana:
    image: grafana/grafana
    user: "472"
    ports:
      - "3000:3000"
    volumes:
      - ./grafana/config/grafana_datasources.yaml:/etc/grafana/provisioning/datasources/datasource.yaml:ro
      # - ./grafana/config/grafana_dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml:ro
      # - ./grafana/dashboards:/opt/grafana/dashboards
    depends_on:
      - postgres
    networks:
      - mlflow_network
      - frontend

    restart: always

volumes:
  pgdata:

networks:
  mlflow_network:
    driver: bridge
  frontend:
